#!/usr/bin/python


import dns.resolver
import re
import sys
import optparse
import logging
import socket
import netaddr

usage = "usage: %prog give the program a DNS a Name Server IP and a maximum recursion depth. example: dnsquery google.com 8.8.8.8 50"
parser = optparse.OptionParser(usage=usage)
parser.add_option("-u","--usage", action = "store_true", dest = "optionUsage", help = "Show List of Options")
parser.add_option("-v","--verbose", action = "store_true", dest = "verbose", default = False, help = "Turn On program output")

(options, args) = parser.parse_args()



def usage():
	pattern = 'Option'
	count = 0
	start = 0
	flag = True
	optionList = parser.option_list
	strOptionList = str(optionList)
	greaterThanFind = 0
	while flag:
		a = strOptionList.find(pattern, start)

		if a == -1:
			flag = False
		else:
			count += 1
			start = a + 1
			dashFind = strOptionList.find('-', greaterThanFind)
			greaterThanFind = strOptionList.find('>', greaterThanFind + 1)
			options = strOptionList[dashFind:greaterThanFind]
			print(options)
	sys.exit(10)


#searches a domain
def domainSearch(domainCheck, counter, depth=0):
	
	depthCheck(depth)
	
	#searches for TXT records
	try:
		responses = resolver.query(domainCheck, "TXT")
	except:
		logging.warning("An invalid domain was given.")
		sys.exit(1)
	#goes through each response
	for currentRecord in responses:
		
		#checks if records are spf
		if 'spf2.0/pra' or 'v=spf1' is str(currentRecord).split(' ')[0]:
			currentRecordString = str(currentRecord)
			splitString = (currentRecordString.split())

			#looks for ipv4 addresses and adds them to a list
			if any("ip4:" in stringSegment for stringSegment in splitString):
				ipv4 = (" ".join(stringSegment for stringSegment in splitString if 'ip4' in stringSegment))
				noIpv4 = ipv4.replace("ip4:", "")
				splitIpv4.extend(noIpv4.split())

				#checks list for ipv4 address. If it is not in the list it adds it.
				for ipv4Address in splitIpv4[:]:
					if ipv4Address not in ipv4List:
						ipv4List.append(ipv4Address)
				
			#looks for ipv6 addresses and adds them to a list 
			if any("ip6:" in stringSegment for stringSegment in splitString):
				ipv6 = (" ".join(stringSegment for stringSegment in splitString if 'ip6' in stringSegment))
				noIpv6 = ipv6.replace("ip6:", "")
				splitIpv6.extend(noIpv6.split())

				#checks list for ipv6 address. If it is not in the list it adds it.
				for ipv6Address in splitIpv6[:]:
					if ipv6Address not in ipv6List:
						ipv6List.append(ipv6Address)

			if any("mx" in stringSegment for stringSegment in splitString):
				mxLookUp(domain)

			#looks for domains and adds them to a list 
			if any("include:" in stringSegment for stringSegment in splitString):
				domains = (" ".join(stringSegment for stringSegment in splitString if 'include' in stringSegment))
				noInclude = domains.replace("include:", "")
				splitList.extend(noInclude.split())
				
				#checks list for a domain. If it is not in the list it adds it.
				for specificDomain in splitList[:]:
					if specificDomain not in domainList:
						domainList.append(specificDomain)	
			try:
				counter += 1
				domainSearch(domainList[counter-1], counter, depth=depth+1)
			except:
				counter -= 1


def mxLookUp(domain):
	mxResponses = dns.resolver.query(domain, 'MX')
	for response in mxResponses:
		mxRecord = str(response).split()[1]
		if mxRecord not in mxList:
			mxList.append(mxRecord)
		for record in mxList:
			aRecordLookUp(record)
			quadARecordLookUp(record)

#checks domains for A reocords
def aRecordLookUp(domain):
	try:
		aResponses = dns.resolver.query(domain, 'A')
		for response in aResponses:
			aRecord = str(response)
			if aRecord not in aResponseList:
				aResponseList.append(aRecord)
	except:
		return

#checks domains for AAAA records	
def quadARecordLookUp(domain):
	try:
		quadAResponses = dns.resolver.query(domain, 'AAAA')
		for response in quadAResponses:
			quadARecord = str(response)
			if quadARecord not in quadAResponseList:
				quadAResponseList.append(quadARecord)
	except:
		return

#sets the maximum depth of recursion
def depthCheck(currentDepth):
	if currentDepth > maxDepth:
		global toDeep
		toDeep = True
	assert currentDepth < maxDepth
 
#format and output ipv4 records into standard output
def ipv4Formatter(formatCounter, addressList, spfNumber):

	spfList = []
	spfFormat = "v=spf1"
	spfList.append(spfFormat)
	nextRecordSet =  " include:_spf"+ str(int(spfNumber)) + "." + str(domain)
	
	#go through every list element in addressList
	for address in addressList:
		#if the current address is the last in addressList output all values that are currently in spfList and exit function
		if address == addressList[-1]:
			spfList.append(" ip4:")
                        spfList.append(address)
			spfNumber += 1
			nextRecordSet =  " include:_spf"+ str(int(spfNumber)) + "." + str(domain)
			if len(ipv6List) != 0:
				spfList.append(nextRecordSet)
					
			if spfNumber == 1:
				logging.warning(str(domain) +".     IN    TXT  \"" + str("".join(spfList)) + "\"")
			
			else:
				logging.warning("_spf"+str(int(spfNumber-1))+ "." + str(domain) +".     IN    TXT  \"" + str("".join(spfList)) + "\"") 
			varSaver.append(spfNumber)
			return

		#if the address and formating are less than or equal to 255 add it to a list
		if len(spfFormat + " ip4:" + address)+len(nextRecordSet) <= 255:
			spfList.append(" ip4:")
			spfList.append(address)	
			spfFormat = spfFormat + " ip4:" + address 
			formatCounter += 1

		#if not print the current list
		else:
			#if spfNumber is 0 print to this format
			if spfNumber == 0:
				spfNumber += 1
				nextRecordSet =  " include:_spf"+ str(int(spfNumber)) + "." + str(domain)
				spfList.append(nextRecordSet)
				logging.warning(str(domain) + ".           IN    TXT  \"" + str("".join(spfList)) + "\"")
			#if spfNumber is not 0 print to this format
			else:
				spfNumber += 1
				nextRecordSet =  " include:_spf"+ str(int(spfNumber)) + "." + str(domain)
				spfList.append(nextRecordSet)
				logging.warning("_spf"+str(int(spfNumber-1))+ "." + str(domain) +".     IN    TXT  \"" + str("".join(spfList)) + "\"")
			
			#remove used addresses from addressList
			addressList = [ipAddress for ipAddress in addressList if ipAddress not in spfList]
			break
	
	#if the addressList still has elements run it again
	if len(addressList) != 0:
		ipv4Formatter(0, addressList, spfNumber)

	#if addressList is empty add the value of spfNumber to a list to save its value
	else:
		varSaver.append(spfNumber)

#format and output ipv6 records into standard output
def ipv6Formatter(formatCounter, addressList, spfNumber):

        spfList = []
        spfFormat = "v=spf1"
        spfList.append(spfFormat)
        nextRecordSet =  " include:_spf"+ str(int(spfNumber)) + "." + str(domain)
	
	#go through every element in addressList
        for address in addressList:
                #if the current address is the last in addressList output all values that are currently in spfList and exit function
		if address == addressList[-1]:
                        spfList.append(" ip6:")
                        spfList.append(address)
                        spfNumber += 1
                        logging.warning("_spf"+str(int(spfNumber-1))+ "." + str(domain) + ".     IN    TXT  \"" + str("".join(spfList)) + "\"")
                        varSaver.append(spfNumber)
                        return

		#if the address and formating are less than or equal to 255 add it to a list
                if len(spfFormat + " ip6:" + address)+len(nextRecordSet) <= 255:
                        spfList.append(" ip6:")
                        spfList.append(address)
                        spfFormat = spfFormat + " ip6:" + address
                        formatCounter += 1

		#if not print the current list
                else:
			#if spfNumber is 0 print to this format
                        if spfNumber == 0:
                                spfNumber += 1
                                nextRecordSet =  " include:_spf"+ str(int(spfNumber)) + "." + str(domain)
                                spfList.append(nextRecordSet)
                                logging.warning(str(domain) + ".           IN    TXT  \"" + str("".join(spfList)) + "\"")
                        #if spfNumber is not 0 print to this format
			else:
                                spfNumber += 1
                                nextRecordSet =  " include:_spf"+ str(int(spfNumber)) + "." + str(domain)
                                spfList.append(nextRecordSet)
                                logging.warning("_spf"+str(int(spfNumber-1))+ "." + str(domain) +".     IN    TXT  \"" + str("".join(spfList)) + "\"")
			
			#remove used addresses from addressList
                        addressList = [ipAddress for ipAddress in addressList if ipAddress not in spfList]
                        break

	#if the addressList still has elements run it again
        if len(addressList) != 0:
                ipv6Formatter(0, addressList, spfNumber)
        
	#if addressList is empty add the value of spfNumber to a list to save its value
	else:
                varSaver.append(spfNumber)

if options.optionUsage == True:
	usage()

logging.basicConfig(level = logging.WARNING if not options.verbose else logging.INFO, format = "%(message)s")

if options.verbose == True:
	
	try:
		domain = sys.argv[2]
		nameServer = sys.argv[3]
	except IndexError:
		logging.warning("SYNTAX ERROR: This program requires both a domain and a name server to execute.")
		usage()
	try:
		maxDepth = int(sys.argv[4])
	except:
		logging.warning("Either no max depth was set or it was invalid.  Max depth was defaulted to 50.")
		maxDepth = 50
else:
	try:
		domain = sys.argv[1]
		nameServer = sys.argv[2]
	except IndexError:
                logging.warning("SYNTAX ERROR: This program requires both a domain and a name server to execute.")
                usage()
	try:
        	maxDepth = int(sys.argv[3])
	except:
		logging.warning("Either no max depth was set or it was invalid.  Max depth was defaulted to 50.")
        	maxDepth = 50


resolver = dns.resolver.Resolver()
domainList = []
splitList = []
resolver.nameservers = [nameServer]

ipv4List = []
splitIpv4 = []

ipv6List = []
splitIpv6 = []

mxList = []
aResponseList = []
quadAResponseList = []

toDeep = False
spfNumber = 0
counter = 0
ipv4ListCopy = ipv4List
ipv6ListCopy = ipv6List

domainSearch(domain, counter)

ipv4List.extend(aResponseList)
ipv6List.extend(quadAResponseList)


#sort ipv4 addresses numerically
for ipAddress in range(len(ipv4List)):
	ipv4List[ipAddress] = "%3s.%3s.%3s.%3s" % tuple(ipv4List[ipAddress].split("."))
ipv4List.sort()
for ipAddress in range(len(ipv4List)):
	ipv4List[ipAddress] = ipv4List[ipAddress].replace(" ", "")

ipv6ListCopy = ipv6List[:]

for ipAddress in range(len(ipv6List)):
	ipv6List[ipAddress] = (netaddr.IPNetwork(ipv6List[ipAddress]))
	ipv6List[ipAddress] =  int(ipv6List[ipAddress].ip)

ipv6List.sort()

for ipAddress in range(len(ipv6List)):
	ipv6List[ipAddress] = str(netaddr.IPAddress(ipv6List[ipAddress]))
	ipv6List[ipAddress] = ipv6List[ipAddress].replace(" ","")

for ip in ipv6List:
	if any(ip in string for string in ipv6ListCopy):
		ipLocation = [ipAddress for ipAddress, s in enumerate(ipv6ListCopy) if ip in s]
		ipv6List[ipv6List.index(str(ip))] = ipv6ListCopy[ipLocation[0]]


ipv4ListCopy = ipv4List
ipv6ListCopy = ipv6List

varSaver = []

if len(ipv4List) != 0:
	ipv4Formatter(counter, ipv4ListCopy, spfNumber)
	spfNumber = int(varSaver[0])

if len(ipv6List) != 0:
	ipv6Formatter(counter, ipv6ListCopy, spfNumber)



if options.verbose == True:
	sys.stderr.write("All ipv4 addresses found without reformatting" + '\n')
	sys.stderr.write("ipv4:" + (" ipv4:".join(ipv4List)) + '\n')
	sys.stderr.write("All ipv6 addresses found without reformatting" + '\n')
	sys.stderr.write("ipv6:" + (" ipv6:".join(ipv6List)) + '\n')
	sys.stderr.write("IPV4 addresses found while checking A records" + '\n')
	sys.stderr.write(" ".join(aResponseList) + '\n')
	sys.stderr.write("IPV6 addresses found while checking AAAA records" + '\n')
	sys.stderr.write(" ".join(quadAResponseList) + '\n')

